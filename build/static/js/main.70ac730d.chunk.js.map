{"version":3,"sources":["components/Player.js","components/provider.js","components/Header.js","components/Game.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Game_Chooose","SYMBOLS","TURNS","getEmptyCells","cells","map","val","idx","filter","item","checkLeftMove","length","checkGameStatus","winlines","i","a","b","c","position","symbolType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptycells","minimax","depth","computerType","isMax","point","calculate","best","lengthCells","nextcells","max","min","findBestMove","bestValue","bestMove","moveValue","AppContext","React","createContext","AppProvider","initailState","gameType","currentSymbol","playerTurn","Array","fill","gameState","SymbolType","state","changeGameType","type","initiateNewGame","humanPlay","newGame","initiateGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","setState","applyingState","prev","nextSymbol","nectPlaterTurn","AI","this","Provider","props","children","Component","GameType","name","Consumer","context","onClick","className","Header","src","alt","contextType","Cell","symb","isDoneClas","Board","boardRefer","createRef","current","classList","add","remove","ref","Game","TextIn","currentsymbolType","Footer","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70ac730d.chunk.js","sourcesContent":["export const Game_Chooose={\r\n    Two_Player : 0,\r\n    With_Conpueter: 1\r\n}\r\nexport const SYMBOL_Types={\r\n    O: 0,\r\n    X: 1\r\n}\r\nexport const SYMBOLS= ['O','X'];\r\n//type of turns default will be human\r\nexport const  TURNS={\r\n    Human : 0,\r\n    Computer: 1\r\n}\r\n\r\nconst getEmptyCells = (cells) => {\r\n    return cells\r\n      .map((val, idx) => [val, idx])\r\n      .filter(item => item[0] === null);\r\n  }\r\nconst checkLeftMove=(cells)=>{\r\n    const emptycells = getEmptyCells(cells);\r\n    return emptycells.length > 0;\r\n}\r\n\r\nexport const checkGameStatus=(cells)=>{\r\n    const winlines=[\r\n    [0, 1, 2], // h.h0\r\n    [3, 4, 5], // h.h1 \r\n    [6, 7, 8], // h.h2\r\n    [0, 3, 6], // v.v0\r\n    [1, 4, 7], // v.v1\r\n    [2, 5, 8], // v.v2\r\n    [0, 4, 8], // d.d0\r\n    [2, 4, 6]  // d.d1\r\n    ];\r\n\r\n    let position =\"\";\r\n   \r\n    for(let i=0;i<winlines.length;i++){\r\n      const [a,b,c] = winlines[i];\r\n\r\n      if(cells[a]!==null && cells[a] === cells[b] && cells[a]===cells[c]){\r\n          if(i >= 0 && i<=2) position=`h h${i}`;\r\n          else if(i>= 3 && i<= 5) position= `v v${i-3}`;\r\n          else position = `d${i - 6}`;\r\n\r\n          return{\r\n              position,\r\n              symbolType: cells[a],\r\n              isTie: null\r\n          }\r\n      }\r\n    }\r\n\r\n    return{\r\n        position: \"\",\r\n        symbolType: null,\r\n        isTie: checkLeftMove(cells) ? null : true\r\n    };\r\n}\r\n\r\nexport const getRandom = (start , end)=>{\r\n    return start + Math.floor(Math.random()* (end - start));\r\n}\r\n\r\nexport const replace = (cells, index, value) =>{\r\n    return [...cells.slice(0,index) , value, ...cells.slice(index +1, cells.length)];\r\n\r\n}\r\n/*RANDOM MOVES*/\r\nexport const findRandomMove=(cells)=>{\r\n    const emptycells = getEmptyCells(cells);\r\n    if(emptycells.length > 0){\r\n        const randomNumber = getRandom(0, emptycells.length);\r\n        const index = emptycells[randomNumber][1];\r\n\r\n        return index;\r\n    }\r\n    return null;\r\n}\r\n\r\n/*finding best movrv based on minimax algorithm*/\r\n\r\nconst calculate = (cells, computerType) =>{\r\n    const winlines = [\r\n        [0, 1, 2], // h.h0\r\n        [3, 4, 5], // h.h1 \r\n        [6, 7, 8], // h.h2\r\n        [0, 3, 6], // v.v0\r\n        [1, 4, 7], // v.v1\r\n        [2, 5, 8], // v.v2\r\n        [0, 4, 8], // d.d0\r\n        [2, 4, 6]  // d.d1\r\n    ];\r\n\r\n    for(let i=0;i<winlines.length;i++){\r\n        const [a,b,c] = winlines[i];\r\n\r\n        if(cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]){\r\n            if(cells[a] === computerType) return 10;\r\n            return -10;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n//minimax algorithm\r\nconst minimax = (cells, depth , computerType , isMax)=>{\r\n    const point = calculate(cells, computerType);\r\n//checking the score\r\n    if(point === 10) return point - depth;\r\n\r\n    if(point === -10) return point + depth;\r\n\r\n    if(!checkLeftMove(cells)) return 0;\r\n\r\n    const lengthCells = cells.length;\r\n    let best;\r\n\r\n    if(isMax){\r\n        best = -1000;\r\n\r\n        for(let i=0 ;i<lengthCells; i++){\r\n            const cell = cells[i];\r\n\r\n            if(cell === null){\r\n                const nextcells = replace(cells,i,computerType);\r\n\r\n                best = Math.max(best, minimax(nextcells ,depth+1, computerType, !isMax));\r\n            }\r\n        }\r\n    }else{\r\n        best = 1000;\r\n\r\n        for(let i=0;i<lengthCells ;i++)\r\n        {\r\n            const cell = cells[i];\r\n\r\n            if(cell === null){\r\n                const nextcells = replace(cells, i , 1- computerType);\r\n\r\n                best = Math.min(best, minimax(nextcells, depth+1, computerType, !isMax));\r\n\r\n            }\r\n        }\r\n    }\r\n    return best;\r\n}\r\n\r\nexport const findBestMove = (cells,computerType)=>{\r\n   let bestValue = -1000;\r\n    let bestMove = null;\r\n\r\n    const lengthCells = cells.length;\r\n\r\n    for(let i=0;i <lengthCells;i++){\r\n        const cell = cells[i];\r\n\r\n        if(cell === null){\r\n            const nextcells = replace(cells,i,computerType);\r\n\r\n            const moveValue = minimax(nextcells,0,computerType, false);\r\n\r\n\r\n            if(moveValue > bestValue){\r\n                bestValue = moveValue;\r\n                bestMove = i;\r\n            }\r\n        }\r\n    }\r\n    return bestMove;\r\n}","import React, { Component } from 'react'\r\nimport './Player'\r\nimport { Game_Chooose, TURNS, findRandomMove, getRandom, replace, checkGameStatus, findBestMove } from './Player';\r\n\r\nconst TAKEN_TIME = 500;\r\n\r\nexport const AppContext = React.createContext();\r\n\r\n export default class AppProvider extends Component{\r\n    initailState = {\r\n        gameType: Game_Chooose.Two_Player,\r\n        currentSymbol: getRandom(0, 2),\r\n        playerTurn: getRandom(0, 2),\r\n        cells: new Array(9).fill(null),\r\n        gameState: {\r\n          position: \"\",\r\n          SymbolType: null,\r\n          isTie: null,\r\n        },\r\n      }\r\n      state = {\r\n        gameType: this.initailState.gameType,\r\n        currentSymbol: this.initailState.currentSymbol,\r\n        playerTurn: this.initailState.playerTurn,\r\n        cells: this.initailState.cells,\r\n        gameState: this.initailState.gameState,\r\n\r\n        changeGameType: (type) =>{\r\n            if(this.state.gameType !== type){\r\n                this.initiateNewGame(type);\r\n            }\r\n        },\r\n        humanPlay:(index) =>{\r\n            this.humanPlay(index)\r\n        },\r\n        newGame:()=>{\r\n            this.initiateNewGame(this.state.gameType);\r\n        }\r\n    }\r\n    initiateGame=()=>{\r\n        if(this.state.gameType === Game_Chooose.With_Conpueter &&\r\n            this.state.playerTurn === TURNS.Computer){\r\n                if(this.timeout){\r\n                    clearTimeout(this.timeout);\r\n                }\r\n\r\n                this.timeout = setTimeout(()=>{\r\n                    const randomMove = findRandomMove(this.state.cells);\r\n                    this.computerPlay(randomMove);\r\n                }, TAKEN_TIME);\r\n            }\r\n        }\r\n        initiateNewGame=(type = this.initailState.gameType) =>{\r\n            this.setState(()=>{\r\n                return{\r\n                    gameType: type,\r\n                    currentSymbol: getRandom(0,2),\r\n                    playerTurn: getRandom(0,2),\r\n                    cells: this.initailState.cells,\r\n                    gameState: this.initailState.gameState,\r\n                }\r\n            },()=>{\r\n                this.initiateGame();\r\n            });\r\n        }\r\n\r\n        applyingState = (prev , index) =>{\r\n            const cells = prev.cells;\r\n            const nextSymbol = 1 - prev.currentSymbol;\r\n            const nectPlaterTurn = 1- prev.playerTurn;\r\n            const nextcells = replace(cells, index, prev.currentSymbol);\r\n            const gameState = checkGameStatus(nextcells);\r\n            return {\r\n                gameState: gameState,\r\n                currentSymbol: nextSymbol,\r\n                playerTurn: nectPlaterTurn,\r\n                cells: nextcells\r\n            }\r\n        }\r\n\r\n        humanPlay = (index) => {\r\n            if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n              (this.state.gameType === Game_Chooose.Two_Player || this.state.playerTurn === TURNS.Human)) {\r\n        \r\n              this.setState(prev => {\r\n                return this.applyingState(prev, index);\r\n              }, () => {\r\n                // Make a move for computer if the game is in 'versus computer' mode\r\n                if (this.state.gameState.position === \"\" &&\r\n                  this.state.gameType === Game_Chooose.With_Conpueter &&\r\n                  this.state.playerTurn === TURNS.Computer) {\r\n        \r\n                  setTimeout(() => {\r\n                    this.AI();\r\n                  }, TAKEN_TIME);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        \r\n          computerPlay = (index) => {\r\n            if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\r\n              this.state.gameType === Game_Chooose.With_Conpueter &&\r\n              this.state.playerTurn === TURNS.Computer) {\r\n        \r\n              this.setState(prev => this.applyingState(prev, index));\r\n            }\r\n          }\r\n        \r\n\r\n        AI=()=>{\r\n            const bestMove = findBestMove(this.state.cells, this.state.currentSymbol);\r\n\r\n            if(bestMove !== null){\r\n              this.computerPlay(bestMove)\r\n            }\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.initiateGame();\r\n        }\r\n     render() {\r\n         return (\r\n              <AppContext.Provider value= {this.state}>\r\n                  {this.props.children}\r\n              </AppContext.Provider>\r\n         );\r\n     }\r\n    }","import React, { Component } from 'react'\r\nimport { AppContext } from './provider';\r\nimport { Game_Chooose } from './Player';\r\nimport './provider'\r\nimport './Header.css';\r\n\r\nconst GameType = (props) => {\r\n    const { value, name } = props;\r\n\r\n    return (\r\n      <AppContext.Consumer>\r\n        {context => (\r\n          <li \r\n            onClick={() => context.changeGameType(value)} \r\n            className={value === context.gameType ? \"active\" : \"\"}> \r\n            {name} \r\n          </li>\r\n        )}\r\n      </AppContext.Consumer>\r\n    )\r\n  }\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        \r\n        <h1>Tic Tac Toe</h1>\r\n        <ul>\r\n        <img src=\"https://img.icons8.com/dusk/64/000000/planet-globe.png\" alt=\"alien\"/>\r\n        <img src=\"https://img.icons8.com/color/96/000000/astronaut.png\" alt=\"human\"/>\r\n          <GameType value={Game_Chooose.Two_Player} name=\"2 Players\" />\r\n          <GameType value={Game_Chooose.With_Conpueter} name=\"Versus Computer\" />\r\n          <img src=\"https://img.icons8.com/cotton/64/000000/robot-2.png\" alt=\"robot\"/>      \r\n        </ul>\r\n        <div>\r\n          <button onClick={() => this.context.newGame()}>New Game</button>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nHeader.contextType = AppContext;\r\nexport default Header","import React, { Component } from 'react'\r\nimport { AppContext } from './provider';\r\nimport './Player'\r\nimport { Game_Chooose, SYMBOLS, TURNS } from './Player';\r\nimport './Game.css';\r\n\r\nconst SYMBOL_PLACEHOLDER = \"I\";\r\n\r\nconst Cell =(props) =>{\r\n    return(\r\n        <AppContext.Consumer>\r\n            {context =>{\r\n                const value = context.cells[props.index];\r\n                const symb = value !== null ? SYMBOLS[value]: SYMBOL_PLACEHOLDER;\r\n                const isDoneClas = symb !== SYMBOL_PLACEHOLDER ? 'done': '';\r\n\r\n                return(\r\n                    <button \r\n                    className={`cell cell-${props.index} ${isDoneClas}`}\r\n                    onClick={()=> context.humanPlay(props.index)}>\r\n                        {symb}\r\n                    </button>\r\n                )\r\n            }\r\n            }\r\n        </AppContext.Consumer>\r\n    )\r\n}\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.boardRefer = React.createRef();\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.context.gameState.position !== \"\") {\r\n          setTimeout(() => {\r\n            this.boardRefer.current.classList.add('full');\r\n          }, 50);\r\n        } else {\r\n          this.boardRefer.current.classList.remove('full');\r\n        }\r\n      }\r\n      render() {\r\n        return (\r\n          <div className={`board ${this.context.gameState.position}`} ref={this.boardRefer}>\r\n            <div className=\"board-row\">\r\n              <Cell index={0} />\r\n              <Cell index={1} />\r\n              <Cell index={2} />\r\n            </div>\r\n    \r\n            <div className=\"board-row\">\r\n              <Cell index={3} />\r\n              <Cell index={4} />\r\n              <Cell index={5} />\r\n            </div>\r\n    \r\n            <div className=\"board-row\">\r\n              <Cell index={6} />\r\n              <Cell index={7} />\r\n              <Cell index={8} />\r\n            </div>\r\n          </div>\r\n           )\r\n        }\r\n    }\r\n    Board.contextType = AppContext;\r\n\r\n    class Game extends Component{\r\n        render() {\r\n            let TextIn = '';\r\n            const currentsymbolType = this.context.currentSymbol;\r\n            if(this.context.gameState.isTie){\r\n                TextIn='Tie!!';\r\n            }\r\n            else{\r\n                if(this.context.gameType === Game_Chooose.Two_Player){\r\n                    if(this.context.gameState.position === \"\"){\r\n                        TextIn= `It is player(${SYMBOLS[currentsymbolType]}) turn`;\r\n                        \r\n                    }else{\r\n                        TextIn = `Player(${SYMBOLS[1-currentsymbolType]})`\r\n                    }\r\n                }else{\r\n                    if (this.context.gameState.position === \"\") {\r\n                        if (this.context.playerTurn === TURNS.Human) TextIn = `It's your turn`;\r\n                        else TextIn = `It's computer turn`;\r\n                }else{\r\n                    if(this.context.playerTurn === TURNS.Human)\r\n                    TextIn = `Computer win!`;\r\n                    else \r\n                    TextIn = `You win!`;\r\n                }\r\n            }\r\n        }\r\n\r\n            return (\r\n                <main className=\"main\">\r\n                    <div className='info'>{TextIn}</div>\r\n                    <Board />\r\n                </main>\r\n            );\r\n        }\r\n    }\r\nGame.contextType = AppContext;\r\nexport default Game;","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component{\r\n    render() {\r\n        return (\r\n             <footer className=\"footer\">\r\n                <p>Made By StarShip-Crew</p>\r\n               {\" \"}\r\n                <a href=\"https://github.com/GeshikaSingh/Starship-Crew\" target=\"_blank\" rel=\"noreferrer noopener\">Github</a> \r\n             </footer>\r\n        );\r\n    }\r\n} \r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport AppProvider from './components/provider';\r\nimport Header from './components/Header';\r\nimport Game from './components/Game';\r\nimport Footer from './components/Footer';\r\nimport './App.css'\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <AppProvider>\r\n        <div className=\"crew\">\r\n          <h1>Bored in Spaceship?? <img src=\"https://img.icons8.com/cotton/64/000000/space-shuttle.png\" alt=\"spaceship\"/></h1>\r\n            <p>Let's Play Game</p>\r\n          </div>\r\n        <div className=\"app\">\r\n          <Header />\r\n          <Game />\r\n          <Footer />\r\n        </div>\r\n      </AppProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}